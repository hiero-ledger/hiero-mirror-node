# SPDX-License-Identifier: Apache-2.0

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: rest

alertmanager:
  inhibitRules:
    enabled: false
    InhibitAllWhenPodIssues:
      enabled: true
      matches:
        - sourceMatch:
            - name: area
              value: resource
          targetMatch:
            - name: application
              value: rest
          equal:
            - namespace
            - pod

annotations: {}

config: {}

# Environment variables to add to the container. The value can either be a string or an EnvVarSource. Evaluated as a template.
env:
  CONFIG_PATH: "/usr/etc/hiero/"
  # FOO:
  #   valueFrom:
  #     secretKeyRef:
  #       name: '{{ .Release.Name }}-custom'
  #       key: BAR

# Add config maps or secrets as environment variables. Evaluated as a template.
envFrom: []
# - secretRef:
#     name: '{{ .Release.Name }}-env'

fullnameOverride: ""

gateway:
  gcp:
    backendPolicy:
      connectionDraining:
        drainingTimeoutSec: 10
      logging:
        enabled: false
      maxRatePerEndpoint: 250  # Requires a change to HPA to take effect
      sessionAffinity:
        type: CLIENT_IP
      timeoutSec: 20
    enabled: true
    healthCheckPolicy:
      config:
        httpHealthCheck:
          port: 5551
          requestPath: "{{ .Values.readinessProbe.httpGet.path }}"
        type: HTTP
      healthyThreshold: 1
  rules:
    - backendRefs:
        - group: "{{ .Values.gateway.target.group }}"
          kind: "{{ .Values.gateway.target.kind }}"
          name: "{{ include \"hedera-mirror-rest.fullname\" $ }}"
          port: 80
      matches: |
        # Airdrops
        {{- if false }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/outstanding$'
        {{- end }}
        {{- if false }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/pending'
        {{- end }}
        {{- if true }}
        # Accounts
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/crypto'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/tokens'
        {{- end }}
        {{- if false }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/nfts'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/nfts'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/rewards'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/tokens'
        {{- end }}
        # Balances
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/balances$'
        {{- end }}
        # Blocks
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/blocks/((0x)?[0-9a-fA-F]+|\d+)$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/blocks$'
        {{- end }}
        # Contracts
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/results/[0-9a-zA-Z.-]+/actions$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results/logs$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results/\d{10}\.\d{9}$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/state$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/results/[0-9a-zA-Z.-]+$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/results/logs$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts/results$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/contracts$'
        {{- end }}
        # Network
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/network/exchangerate$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/network/fees$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/network/nodes$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/network/stake$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/network/supply$'
        {{- end }}
        # Schedules
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/schedules/\d+\.\d+\.\d+$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/schedules$'
        {{- end }}
        # Tokens
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts/\d+/transactions$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts/\d+$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/balances$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/tokens$'
        {{- end }}
        # Topics
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/topics/\d+\.\d+\.\d+/messages/\d+$'
        {{- end }}
        {{- if true }}
        - path:
            type: RegularExpression
            value: '/api/v1/topics/\d+\.\d+\.\d+/messages$'
        {{- end }}
  target:
    group: ""
    kind: Service

global:
  config: {}
  env: {}
  gateway:
    enabled: false
    hostnames: []
  image: {}
  middleware: false
  namespaceOverride: ""
  podAnnotations: {}

hpa:
  behavior: {}
  enabled: true
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80

  minReplicas: 1

image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: gcr.io
  repository: mirrornode/hedera-mirror-rest
  tag: ""  # Defaults to the chart's app version

ingress:
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: '{{ include "hedera-mirror-rest.namespace" . }}-{{ include "hedera-mirror-rest.fullname" . }}@kubernetescrd'
  enabled: true
  hosts:
    - host: ""
      paths:
        # Airdrops
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/outstanding$'
          enabled: false
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/pending'
          enabled: false
        # Accounts
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/crypto'
          enabled: true
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/nfts'
          enabled: false
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/tokens'
          enabled: true
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/nfts'
          enabled: true
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/rewards'
          enabled: true
        - path: '/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/tokens'
          enabled: true
        # Balances
        - path: '/api/v1/balances$'
          enabled: true
        # Blocks
        - path: '/api/v1/blocks/((0x)?[0-9a-fA-F]+|\d+)$'
          enabled: true
        - path: '/api/v1/blocks$'
          enabled: true
        # Contracts
        - path: '/api/v1/contracts/results/[0-9a-zA-Z.-]+/actions$'
          enabled: true
        - path: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results/logs$'
          enabled: true
        - path: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results/\d{10}\.\d{9}$'
          enabled: true
        - path: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/results$'
          enabled: true
        - path: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/state$'
          enabled: true
        - path: '/api/v1/contracts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))$'
          enabled: true
        - path: '/api/v1/contracts/results/[0-9a-zA-Z.-]+$'
          enabled: true
        - path: '/api/v1/contracts/results/logs$'
          enabled: true
        - path: '/api/v1/contracts/results$'
          enabled: true
        - path: '/api/v1/contracts$'
          enabled: true
        # Network
        - path: '/api/v1/network/exchangerate$'
          enabled: true
        - path: '/api/v1/network/fees$'
          enabled: true
        - path: '/api/v1/network/nodes$'
          enabled: true
        - path: '/api/v1/network/stake$'
          enabled: true
        - path: '/api/v1/network/supply$'
          enabled: true
        # Schedules
        - path: '/api/v1/schedules/\d+\.\d+\.\d+$'
          enabled: true
        - path: '/api/v1/schedules$'
          enabled: true
        # Tokens
        - path: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts/\d+/transactions$'
          enabled: true
        - path: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts/\d+$'
          enabled: true
        - path: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/nfts$'
          enabled: true
        - path: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})/balances$'
          enabled: true
        - path: '/api/v1/tokens/(\d+\.\d+\.\d+|(0x)?[A-Fa-f0-9]{40})$'
          enabled: true
        - path: '/api/v1/tokens$'
          enabled: true
        # Topics
        - path: '/api/v1/topics/\d+\.\d+\.\d+/messages/\d+$'
          enabled: true
        - path: '/api/v1/topics/\d+\.\d+\.\d+/messages$'
          enabled: true
  tls:
    enabled: false
    secretName: ""

labels: {}

livenessProbe:
  httpGet:
    path: /health/liveness
    port: http
  initialDelaySeconds: 25
  timeoutSeconds: 2

middleware:
  - circuitBreaker:
      expression: NetworkErrorRatio() > 0.25 || ResponseCodeRatio(500, 600, 0, 600) > 0.25
  - retry:
      attempts: 10
      initialInterval: 100ms

monitor:
  config:
    servers:
      - baseUrl: "http://{{ .Release.Name }}-rest:{{ .Values.service.port }}"
        name: kubernetes
        restJavaUrl: "http://{{ .Release.Name }}-restjava:{{ .Values.service.port }}"
        web3Url: "http://{{ .Release.Name }}-web3:{{ .Values.service.port }}"
  enabled: true
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: gcr.io
    repository: mirrornode/hedera-mirror-rest-monitor
    tag: ""  # Defaults to the chart's app version
  nodeSelector: {}
  priorityClassName: ""
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 64Mi
  service:
    type: ClusterIP
  test:
    annotations:
      helm.sh/hook: test-success
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      helm.sh/hook-weight: "20"
    enabled: true
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      repository: curlimages/curl
      tag: latest
    priorityClassName: ""
  tolerations: []

nameOverride: ""

nodeSelector: {}

podAnnotations: {}

podDisruptionBudget:
  enabled: false
  # maxUnavailable: 0
  minAvailable: 50%

podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

priorityClassName: ""

prometheusRules:
  enabled: false
  RestErrors:
    annotations:
      description: "REST API 5xx error rate for {{ $labels.namespace }} is {{ $value | humanizePercentage }}"
      summary: "Mirror REST API error rate exceeds 1%"
    enabled: true
    expr: sum(rate(api_request_total{container="rest",code=~"^5.."}[1m])) by (namespace) / sum(rate(api_request_total{container="rest"}[1m])) by (namespace) > 0.01
    for: 1m
    labels:
      severity: critical
      application: rest

  RestHighCPU:
    annotations:
      description: "{{ $labels.namespace }}/{{ $labels.pod }} CPU usage reached {{ $value | humanizePercentage }}"
      summary: "Mirror REST API CPU usage exceeds 80%"
    enabled: true
    expr: sum(nodejs_process_cpu_usage_percentage{container="rest"}) by (namespace, pod) / 100 > 0.8
    for: 5m
    labels:
      severity: critical
      application: rest
      area: resource

  RestNoPodsReady:
    annotations:
      description: "No REST API instances are currently running in {{ $labels.namespace }}"
      summary: No REST API instances running
    enabled: true
    expr: sum(kube_pod_status_ready{pod=~".*-rest-.*",condition="true"}) by (namespace) < 1
    for: 2m
    labels:
      severity: critical
      application: rest
      area: resource

  RestNoRequests:
    annotations:
      description: "REST API has not seen any requests to {{ $labels.namespace }} for 5m"
      summary: "No Mirror REST API requests seen for awhile"
    enabled: true
    expr: sum(rate(api_all_request_total{container="rest"}[3m])) by (namespace) <= 0
    for: 5m
    labels:
      severity: warning
      application: rest

  RestRequestLatency:
    annotations:
      description: "{{ $labels.namespace }}/{{ $labels.pod }} is taking {{ $value }} ms to generate a response"
      summary: "Mirror REST API request latency exceeds 2s"
    enabled: true
    expr: sum(rate(api_request_duration_milliseconds_sum{container="rest"}[5m])) by (namespace, pod) / sum(rate(api_request_duration_milliseconds_count{container="rest"}[5m])) by (namespace, pod) > 2000
    for: 1m
    labels:
      severity: warning
      application: rest

readinessProbe:
  httpGet:
    path: /health/readiness
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 2

# Only set if HPA is disabled
# replicas: 1

resources:
  limits:
    cpu: 1100m
    memory: 600Mi
  requests:
    cpu: 700m
    memory: 64Mi

revisionHistoryLimit: 3

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true

service:
  annotations: {}
  port: 80
  type: ClusterIP

serviceAccount:
  create: true
  # The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name:

serviceMonitor:
  enabled: false
  interval: 30s

terminationGracePeriodSeconds: 60

test:
  annotations:
    helm.sh/hook: test-success
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  checks:
    accounts: true
    transactions: true
  enabled: true
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    repository: bats/bats
    tag: 1.11.1
  priorityClassName: ""

tolerations: []

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 25%

# Volumes to add to the container. The key is the volume name and the value is the volume mount definition. The same keys should also appear in volumes below.
volumeMounts:
  config:
    mountPath: /usr/etc/hiero

# Volume mounts to add to the container. The key is the volume name and the value is the volume definition. Evaluated as a template.
volumes:
  config:
    secret:
      defaultMode: 420
      secretName: '{{ include "hedera-mirror-rest.fullname" . }}'
