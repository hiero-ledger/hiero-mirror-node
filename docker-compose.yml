# SPDX-License-Identifier: Apache-2.0

services:
  api-proxy:
    configs:
      - source: proxy-config
        target: /etc/nginx/conf.d/default.conf
    image: nginx:1-alpine
    restart: unless-stopped
    ports:
      - 8080:8080
    tty: true

  db:
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      POSTGRES_PASSWORD: postgres_password
    image: postgres:16-alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    stop_grace_period: 2m
    stop_signal: SIGTERM
    tty: true
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./importer/src/main/resources/db/scripts/init.sh:/docker-entrypoint-initdb.d/init.sh

  graphql:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    deploy:
      replicas: 0
    environment:
      HIERO_MIRROR_GRAPHQL_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
    image: gcr.io/mirrornode/hedera-mirror-graphql:0.134.0-SNAPSHOT
    ports:
      - 8083:8083
    pull_policy: always
    restart: unless-stopped
    tty: true

  grpc:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    environment:
      HIERO_MIRROR_GRPC_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
      SPRING_DATA_REDIS_HOST: redis
    image: gcr.io/mirrornode/hedera-mirror-grpc:0.134.0-SNAPSHOT
    ports:
      - 5600:5600
    pull_policy: always
    restart: unless-stopped
    tty: true

  importer:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    environment:
      HIERO_MIRROR_IMPORTER_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
      SPRING_DATA_REDIS_HOST: redis
    image: gcr.io/mirrornode/hedera-mirror-importer:0.134.0-SNAPSHOT
    pull_policy: always
    restart: unless-stopped
    tty: true

  monitor:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    deploy:
      replicas: 0
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
    image: gcr.io/mirrornode/hedera-mirror-monitor:0.134.0-SNAPSHOT
    pull_policy: always
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    stop_grace_period: 2m
    stop_signal: SIGTERM
    tty: true

  rest:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    environment:
      CONFIG_PATH: /usr/etc/hiero/
      HIERO_MIRROR_REST_DB_HOST: db
      HIERO_MIRROR_REST_REDIS_URI: redis://redis:6379
    image: gcr.io/mirrornode/hedera-mirror-rest:0.134.0-SNAPSHOT
    pull_policy: always
    ports:
      - 5551:5551
    restart: unless-stopped
    tty: true

  rest-java:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    environment:
      HIERO_MIRROR_RESTJAVA_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
    image: gcr.io/mirrornode/hedera-mirror-rest-java:0.134.0-SNAPSHOT
    pull_policy: always
    ports:
      - 8084:8084
    restart: unless-stopped
    tty: true

  rosetta:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    deploy:
      replicas: 0
    environment:
      HIERO_MIRROR_ROSETTA_API_CONFIG: /usr/etc/hiero/application.yml
      HIERO_MIRROR_ROSETTA_DB_HOST: db
    image: gcr.io/mirrornode/hedera-mirror-rosetta:0.134.0-SNAPSHOT
    pull_policy: always
    ports:
      - 5700:5700
    restart: unless-stopped
    tty: true

  web3:
    configs:
      - source: app-config
        target: /usr/etc/hiero/application.yml
        uid: "1000"
        gid: "1000"
    environment:
      HIERO_MIRROR_WEB3_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hiero/
    image: gcr.io/mirrornode/hedera-mirror-web3:0.134.0-SNAPSHOT
    pull_policy: always
    ports:
      - 8545:8545
    restart: unless-stopped
    tty: true

configs:
  app-config:
    content: |
      hiero:
        mirror:
          importer:
            network: DEMO # Select one of PREVIEWNET/TESTNET/MAINNET and populate below config
      #     downloader:
      #       accessKey: {GOOG1E/AWS....}
      #       cloudProvider: "GCP/S3"
      #       gcpProjectId: {projectId} # N/A for AWS
      #       secretKey: {GOOG1E/AWS....}

  proxy-config:
    content: |
      # YAML uses $ for variable substitution, so we use $$ when using nginx variables.

      # The upstream directive allows the use of the keepalive (good for performance),
      # but the hostname must be resolvable when nginx starts.
      upstream grpc_host      { server grpc:5600;       keepalive 16; }
      upstream rest_host      { server rest:5551;       keepalive 16; }
      upstream rest_java_host { server rest-java:8084;  keepalive 16; }
      upstream web3_host      { server web3:8545;       keepalive 16; }

      server {
        # graphql and rosetta are optional containers, disabled by default, so we cannot leverage the upstream directive.
        set $$graphql_host graphql:8083;
        set $$rosetta_host rosetta:5700;

        # common configurations
        listen 8080;
        proxy_http_version 1.1;
        proxy_set_header Host $$host;
        proxy_set_header X-Real-IP $$remote_addr;
        proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $$scheme;
        proxy_set_header "Connection" "";
        resolver 127.0.0.11 valid=600s; # let docker resolve the host names
        http2 on; # enable gRPC

        # web3 host
        location /api/v1/contracts/call { proxy_pass http://web3_host$$request_uri; }
        location ~ "^/api/v1/contracts/results/((0x)?[A-Fa-f0-9]{64}|\d+\.\d+\.\d+-\d+-\d+)/opcodes" { proxy_pass http://web3_host$$request_uri; }

        # rest-java host
        location ~ "^/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/(allowances/nfts|airdrops)" { proxy_pass http://rest_java_host$$request_uri; }
        location ~ "^/api/v1/topics/(\d+\.){0,2}\d+$" { proxy_pass http://rest_java_host$$request_uri; }

        # rest host
        location /api/v1/ { proxy_pass http://rest_host$$request_uri; }

        # grpc host
        # Setting 600s read timeout for topic subscription. When the client receives a message the timeout resets to 0.
        location = /com.hedera.mirror.api.proto.ConsensusService/subscribeTopic { grpc_read_timeout 600s; grpc_pass grpc://grpc_host; }
        location /com.hedera.mirror.api.proto. { grpc_pass grpc://grpc_host; }
        location /grpc.reflection.v1alpha.ServerReflection { grpc_pass grpc://grpc_host; }

        # graphql host
        location = /graphql/alpha { proxy_pass http://$$graphql_host$$request_uri; }

        # rosetta host
        location /rosetta/ { rewrite ^/rosetta/(.*) /$$1 break; proxy_pass http://$$rosetta_host; }
      }
