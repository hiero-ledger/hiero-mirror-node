name: Copy StackGres Citus Cluster

on:
  push:
    branches: [jtn-copy-live-env2]
  workflow_dispatch:
    inputs:
      source_cluster_location:
        default: "us-central1"
        description: "Source: GKE location (zone or region)"
        required: true
      source_cluster_name:
        description: "Source: GKE cluster name"
        default: "mainnet-na"
        required: true
      source_project:
        default: nonprod
        description: "Source: GCP project"
        options: [prod, nonprod]
        required: true
        type: choice
      target_cluster_location:
        default: "us-central1"
        description: "Target: GKE location (zone or region)"
        required: true
      target_cluster_name:
        default: "mainnet-staging-na"
        description: "Target: GKE cluster name"
        required: true
      target_default_pool:
        default: "mainnet-staging-na"
        description: "Target: default pool name"
        required: true
      target_project:
        default: nonprod
        description: "Target: GCP project"
        options: [prod, nonprod]
        required: true
        type: choice
      teardown_target:
        default: true
        description: "Tear down target cluster after k6 tests run"
        required: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  run-copy:
    name: Copy Citus from SOURCE âžœ TARGET
    runs-on: hiero-mirror-node-linux-medium
    env:
      GCP_SNAPSHOT_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_STAGING_PROJECT_ID }}
      GCP_K8S_SOURCE_CLUSTER_NAME: "mainnet-staging-na"
      GCP_K8S_SOURCE_CLUSTER_REGION: "us-central1"
      GCP_K8S_TARGET_CLUSTER_NAME: "large-entity-testing"
      GCP_K8S_TARGET_CLUSTER_REGION: "us-central1"
      GCP_TARGET_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_STAGING_PROJECT_ID }}
      K8S_SOURCE_CLUSTER_CONTEXT: "source_gke_context"
      K8S_TARGET_CLUSTER_CONTEXT: "target_gke_context"
      PINNED_KUBECONFIG: ${{ github.workspace }}/.kube/config
      SA_EMAIL: ${{ secrets.GH_ACTIONS_KUBECTL_GCP_SERVICE_ACCOUNT }}
      WIF_PROVIDER: ${{ secrets.GH_ACTIONS_KUBECTL_WORKLOAD_ID_PROVIDER }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Ensure jq is available
        run: jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Setup gcloud + kubectl + GKE auth plugin
        uses: google-github-actions/setup-gcloud@e427ad8a34f8676edf47cf7d7925499adf3eb74f
        with:
          install_components: gke-gcloud-auth-plugin, kubectl

      - name: Cache Cloud SDK bin paths
        shell: bash
        run: |
          set -euo pipefail
          GCLOUD_BIN="$(command -v gcloud)"
          KUBECTL_BIN="$(command -v kubectl)"
          CLOUDSDK_BIN_DIR="$(dirname "$GCLOUD_BIN")"
          echo "GCLOUD_BIN=$GCLOUD_BIN" >> "$GITHUB_ENV"
          echo "KUBECTL_BIN=$KUBECTL_BIN" >> "$GITHUB_ENV"
          echo "CLOUDSDK_BIN_DIR=$CLOUDSDK_BIN_DIR" >> "$GITHUB_ENV"

      - name: Setup Testkube CLI
        uses: kubeshop/setup-testkube@970d643ec9ecbe5707049c1d65b851da72aab3d9
        with:
          version: v2.3.0

      - name: Prepare pinned kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$PINNED_KUBECONFIG")"
          : > "$PINNED_KUBECONFIG"

      - name: Build ADC for WIF with file-based subject token
        shell: bash
        env:
          AUD_BASE: //iam.googleapis.com/
        run: |
          set -euo pipefail
          : "${ACTIONS_ID_TOKEN_REQUEST_URL:?missing OIDC URL}"
          : "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:?missing OIDC token}"

          SUBJECT_TOKEN_FILE="${RUNNER_TEMP}/gh-oidc.jwt"
          ADC_JSON="${RUNNER_TEMP}/adc-wif.json"
          AUD="${AUD_BASE}${WIF_PROVIDER}"

          refresh_token() {
            curl -sS -H "Accept: application/json; api-version=2.0" \
                 -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                 "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=$(python3 -c 'import urllib.parse,os;print(urllib.parse.quote(os.environ["AUD"],safe=""))')" \
              | jq -r '.value' > "${SUBJECT_TOKEN_FILE}.new"
            mv "${SUBJECT_TOKEN_FILE}.new" "${SUBJECT_TOKEN_FILE}"
          }

          refresh_token

          cat > "${ADC_JSON}" <<EOF
          {
            "type": "external_account",
            "audience": "${AUD}",
            "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
            "token_url": "https://sts.googleapis.com/v1/token",
            "service_account_impersonation_url": "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SA_EMAIL}:generateAccessToken",
            "credential_source": {
              "file": "${SUBJECT_TOKEN_FILE}"
            }
          }
          EOF

          echo "GOOGLE_APPLICATION_CREDENTIALS=${ADC_JSON}" >> "$GITHUB_ENV"
          echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=" >> "$GITHUB_ENV"
          export GOOGLE_APPLICATION_CREDENTIALS="${ADC_JSON}"
          export PATH="${CLOUDSDK_BIN_DIR}:${PATH}"
          hash -r

          (
            while true; do
              refresh_token || true
              gcloud auth print-access-token >/dev/null 2>&1 || true
              sleep 300
            done
          ) &
          echo "REFRESH_PID=$!" >> "$GITHUB_ENV"

      - name: Get GKE credentials (source)
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          project_id: ${{ env.GCP_SNAPSHOT_PROJECT }}
          cluster_name: ${{ env.GCP_K8S_SOURCE_CLUSTER_NAME }}
          location: ${{ env.GCP_K8S_SOURCE_CLUSTER_REGION }}
          context_name: ${{ env.K8S_SOURCE_CLUSTER_CONTEXT }}

      - name: Add source context to pinned kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          cp "$KUBECONFIG" "$PINNED_KUBECONFIG"
          echo "KUBECONFIG=$PINNED_KUBECONFIG" >> "$GITHUB_ENV"

      - name: Get GKE credentials (target)
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          project_id: ${{ env.GCP_TARGET_PROJECT }}
          cluster_name: ${{ env.GCP_K8S_TARGET_CLUSTER_NAME }}
          location: ${{ env.GCP_K8S_TARGET_CLUSTER_REGION }}
          context_name: ${{ env.K8S_TARGET_CLUSTER_CONTEXT }}

      - name: Merge target context into pinned kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          test -f "$PINNED_KUBECONFIG"
          test -f "$KUBECONFIG"
          KUBECONFIG="${PINNED_KUBECONFIG}:$KUBECONFIG" \
            kubectl config view --raw --flatten > "${PINNED_KUBECONFIG}.merged"
          mv "${PINNED_KUBECONFIG}.merged" "$PINNED_KUBECONFIG"
          echo "KUBECONFIG=$PINNED_KUBECONFIG" >> "$GITHUB_ENV"

      - name: Execute copy script
        shell: bash
        env:
          AUTO_CONFIRM: "true"
          DEFAULT_POOL_NAME: "default-pool"
          WAIT_FOR_K6: "true"
        run: |
          set -Eeuo pipefail
          export PATH="${CLOUDSDK_BIN_DIR}:${PATH}"
          hash -r
          cd ./tools/cluster-management/
          ./copy-live-environment.sh

      - name: Cleanup background refresher
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${REFRESH_PID:-}" ]]; then
            kill "${REFRESH_PID}" 2>/dev/null || true
          fi
