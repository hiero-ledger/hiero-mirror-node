name: Copy StackGres Citus Cluster

on:
  push:
    branches: [jtn-copy-live-env2]
  workflow_dispatch:
    inputs:
      source_cluster_location:
        default: "us-central1"
        description: "Source: GKE location (zone or region)"
        required: true
      source_cluster_name:
        description: "Source: GKE cluster name"
        default: "mainnet-na"
        required: true
      source_project:
        default: nonprod
        description: "Source: GCP project"
        options: [prod, nonprod]
        required: true
        type: choice
      target_cluster_location:
        default: "us-central1"
        description: "Target: GKE location (zone or region)"
        required: true
      target_cluster_name:
        default: "mainnet-staging-na"
        description: "Target: GKE cluster name"
        required: true
      target_default_pool:
        default: "mainnet-staging-na"
        description: "Target: default pool name"
        required: true
      target_project:
        default: nonprod
        description: "Target: GCP project"
        options: [prod, nonprod]
        required: true
        type: choice
      teardown_target:
        default: true
        description: "Tear down target cluster after k6 tests run"
        required: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  run-copy:
    name: Copy Citus from SOURCE âžœ TARGET
    runs-on: hiero-mirror-node-linux-medium
    env:
      GCP_SNAPSHOT_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_STAGING_PROJECT_ID }}
      GCP_K8S_SOURCE_CLUSTER_NAME: "mainnet-staging-na"
      GCP_K8S_SOURCE_CLUSTER_REGION: "us-central1"
      GCP_K8S_TARGET_CLUSTER_NAME: "large-entity-testing"
      GCP_K8S_TARGET_CLUSTER_REGION: "us-central1"
      GCP_TARGET_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_STAGING_PROJECT_ID }}
      K8S_SOURCE_CLUSTER_CONTEXT: "source_gke_context"
      K8S_TARGET_CLUSTER_CONTEXT: "target_gke_context"
      PINNED_KUBECONFIG: ${{ github.workspace }}/.kube/config
      SA_EMAIL: ${{ secrets.GH_ACTIONS_KUBECTL_GCP_SERVICE_ACCOUNT }}
      WIF_PROVIDER: ${{ secrets.GH_ACTIONS_KUBECTL_WORKLOAD_ID_PROVIDER }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Ensure jq is available
        run: jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Setup gcloud + GKE auth plugin
        uses: google-github-actions/setup-gcloud@e427ad8a34f8676edf47cf7d7925499adf3eb74f
        with:
          install_components: gke-gcloud-auth-plugin, kubectl

      - name: Create file-backed external_account ADC
        shell: bash
        run: |
          set -euo pipefail
          : "${ACTIONS_ID_TOKEN_REQUEST_URL:?missing OIDC URL}"
          : "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:?missing OIDC token}"

          ADC_DIR="${RUNNER_TEMP}/wif-adc"
          mkdir -p "$ADC_DIR"
          SUBJECT_TOKEN_FILE="${ADC_DIR}/subject.jwt"
          ADC_JSON="${ADC_DIR}/adc.json"
          : > "$SUBJECT_TOKEN_FILE"

          AUD="//iam.googleapis.com/${WIF_PROVIDER}"

          cat >"$ADC_JSON" <<EOF
          {
            "type": "external_account",
            "audience": "${AUD}",
            "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
            "token_url": "https://sts.googleapis.com/v1/token",
            "service_account_impersonation_url": "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SA_EMAIL}:generateAccessToken",
            "credential_source": {
              "file": "${SUBJECT_TOKEN_FILE}"
            }
          }
          EOF
          
          export GOOGLE_APPLICATION_CREDENTIALS="$ADC_JSON"
          export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE="$ADC_JSON"
          
          {
            echo "GOOGLE_APPLICATION_CREDENTIALS=$ADC_JSON"
            echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=$ADC_JSON"
            echo "SUBJECT_TOKEN_FILE=$SUBJECT_TOKEN_FILE"
            echo "AUD=$AUD"
          } >> "$GITHUB_ENV"
      
          ENC_AUD="$(jq -rn --arg s "$AUD" '$s|@uri')"
          TOK_JSON="$(curl -sSf -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${ENC_AUD}")"
          OIDC="$(jq -r '.value // empty' <<<"$TOK_JSON")"
          test -n "$OIDC"
          printf '%s' "$OIDC" > "$SUBJECT_TOKEN_FILE"
          
          gcloud auth application-default print-access-token >/dev/null

      - name: Cache Cloud SDK bin paths
        shell: bash
        run: |
          set -euo pipefail
          GCLOUD_BIN="$(command -v gcloud)"
          KUBECTL_BIN="$(command -v kubectl)"
          CLOUDSDK_BIN_DIR="$(dirname "$GCLOUD_BIN")"
          echo "GCLOUD_BIN=$GCLOUD_BIN" >> "$GITHUB_ENV"
          echo "KUBECTL_BIN=$KUBECTL_BIN" >> "$GITHUB_ENV"
          echo "CLOUDSDK_BIN_DIR=$CLOUDSDK_BIN_DIR" >> "$GITHUB_ENV"

      - name: Setup Testkube CLI
        uses: kubeshop/setup-testkube@970d643ec9ecbe5707049c1d65b851da72aab3d9
        with:
          version: v2.3.0

      - name: Get GKE credentials (source)
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          cluster_name: ${{ env.GCP_K8S_SOURCE_CLUSTER_NAME }}
          context_name: ${{ env.K8S_SOURCE_CLUSTER_CONTEXT }}
          location: ${{ env.GCP_K8S_SOURCE_CLUSTER_REGION }}
          project_id: ${{ env.GCP_SNAPSHOT_PROJECT }}

      - name: Add source context to pinned kube config
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$PINNED_KUBECONFIG")"
          : > "$PINNED_KUBECONFIG"
          cp "$KUBECONFIG" "$PINNED_KUBECONFIG"
          echo "KUBECONFIG=$PINNED_KUBECONFIG" >> "$GITHUB_ENV"

      - name: Get GKE credentials (target)
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          cluster_name: ${{ env.GCP_K8S_TARGET_CLUSTER_NAME }}
          context_name: ${{ env.K8S_TARGET_CLUSTER_CONTEXT }}
          location: ${{ env.GCP_K8S_TARGET_CLUSTER_REGION }}
          project_id: ${{ env.GCP_TARGET_PROJECT }}

      - name: Add target context to pinned kube config
        shell: bash
        run: |
          set -euo pipefail
          test -f "$PINNED_KUBECONFIG"
          test -f "$KUBECONFIG"
          KUBECONFIG="${PINNED_KUBECONFIG}:$KUBECONFIG" \
            kubectl config view --raw --flatten > "${PINNED_KUBECONFIG}.merged"
          mv "${PINNED_KUBECONFIG}.merged" "$PINNED_KUBECONFIG"
          echo "KUBECONFIG=$PINNED_KUBECONFIG" >> "$GITHUB_ENV"

      - name: Execute copy script
        shell: bash
        env:
          AUTO_CONFIRM: "true"
          DEFAULT_POOL_NAME: "default-pool"
          WAIT_FOR_K6: "true"
        run: |
          set -Eeuo pipefail
          export PATH="${CLOUDSDK_BIN_DIR}:${PATH}"
          hash -r

          (
            set -Eeuo pipefail
            while true; do
              ENC_AUD="$(jq -rn --arg s "$AUD" '$s|@uri')"
              TOK_JSON="$(curl -sSf -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${ENC_AUD}")" || { sleep 30; continue; }
              OIDC="$(jq -r '.value // empty' <<<"$TOK_JSON")"
              if [[ -n "$OIDC" ]]; then
                printf '%s' "$OIDC" > "$SUBJECT_TOKEN_FILE"
              fi
              kubectl --context "${K8S_SOURCE_CLUSTER_CONTEXT}" --request-timeout=10s get --raw=/version >/dev/null 2>&1 || true
              kubectl --context "${K8S_TARGET_CLUSTER_CONTEXT}" --request-timeout=10s get --raw=/version >/dev/null 2>&1 || true
              sleep 300
            done
          ) &

          REFRESH_PID=$!
          trap 'kill "$REFRESH_PID" 2>/dev/null || true' EXIT INT TERM

          cd ./tools/cluster-management/
          ./copy-live-environment.sh
