# SPDX-License-Identifier: Apache-2.0

name: Acceptance

on:
  pull_request:
    branches: [main, release/**]
    paths:
      - "test/**"
  push:
    branches: [main, release/**]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch"
        required: true
        type: string

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  solo:
    runs-on: hiero-mirror-node-linux-large
    timeout-minutes: 40
    env:
      SOLO_CLUSTER_NAME: solo-mirror-acceptance
      SOLO_NAMESPACE: solo
      SOLO_CLUSTER_SETUP_NAMESPACE: solo-mirror-acceptance-setup
      SOLO_DEPLOYMENT: solo-deployment
    steps:
      - name: Workflow Start Metrics
        run: |
          echo "=== Workflow Start Metrics ==="
          echo "Workflow start time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "GitHub run ID: ${{ github.run_id }}"
          echo "GitHub run number: ${{ github.run_number }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Base branch: ${{ github.base_ref }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Runner: $(uname -a)"
          echo "Available memory: $(free -h | grep Mem | awk '{print $2}')"
          echo "Available disk: $(df -h / | tail -1 | awk '{print $4}')"
                    echo "=========================================="
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 21

      - name: Install Wget
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wget

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0

      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          kubectl_version: v1.32.3

      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: "temurin"
          java-version: 21

      - name: Install Solo CLI via npm
        run: |
          npm install -g @hashgraph/solo

      - name: Build Mirror Node Test JAR
        run: ./gradlew test:build -x test

      - name: Build Mirror Node Test Docker image
        run: docker build -t gcr.io/mirrornode/hedera-mirror-test:pr-test -f test/Dockerfile ./test

      - name: Setup Solo Cluster
        run: |
          kind create cluster -n "${SOLO_CLUSTER_NAME}" || { echo "Failed to create Kind cluster"; exit 1; }
          solo init || { echo "Failed to initialize Solo"; exit 1; }
          solo cluster-ref connect --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --context kind-"${SOLO_CLUSTER_NAME}" || { echo "Failed to connect to cluster"; exit 1; }
          kind load docker-image gcr.io/mirrornode/hedera-mirror-test:pr-test -n "${SOLO_CLUSTER_NAME}" || { echo "Failed to load docker image"; exit 1; }
          solo deployment create --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}" || { echo "Failed to create deployment"; exit 1; }
          solo deployment add-cluster --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --num-consensus-nodes 1 || { echo "Failed to add cluster to deployment"; exit 1; }
          solo cluster-ref setup --cluster-ref kind-"${SOLO_CLUSTER_NAME}" || { echo "Failed to setup cluster"; exit 1; }
          solo node keys --gossip-keys --tls-keys --deployment "${SOLO_DEPLOYMENT}" -i node1 || { echo "Failed to generate keys"; exit 1; }
          solo network deploy --deployment "${SOLO_DEPLOYMENT}" || { echo "Failed to deploy network"; exit 1; }
          solo node setup --deployment "${SOLO_DEPLOYMENT}" -i node1 || { echo "Failed to setup node"; exit 1; }
          solo node start --deployment "${SOLO_DEPLOYMENT}" -i node1 || { echo "Failed to start node"; exit 1; }

          cat <<EOF > temp-values.yaml
          global:
            image:
              pullPolicy: IfNotPresent
              tag: ${{ github.base_ref }}

          test:
            image:
              tag: pr-test
            config:
              hiero:
                mirror:
                  test:
                    acceptance:
                      network: OTHER
                      web3:
                        modularizedServices: true
            cucumberTags: "@acceptance and not @schedulebase"
            enabled: true
          EOF

          solo mirror-node deploy --deployment "${SOLO_DEPLOYMENT}" -f=temp-values.yaml --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --pinger || { echo "Failed to deploy mirror node"; exit 1; }

          echo "Solo cluster setup completed successfully!"
          
          # Calculate setup timing metrics
          SETUP_END_TIME=$(date +%s)
          SETUP_DURATION=$((SETUP_END_TIME - SETUP_START_TIME))
          
          echo "=== Solo Cluster Setup Metrics ==="
          echo "Setup end time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Setup duration: ${SETUP_DURATION} seconds ($(echo "scale=2; ${SETUP_DURATION}/60" | bc) minutes)"
          echo "=========================================="

      - name: Run acceptance tests
        run: |
          echo "=== Starting Acceptance Tests ==="
          echo "Start time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          START_TIME=$(date +%s)

          # Run the helm test
          helm test mirror -n "${SOLO_NAMESPACE}" --filter name=mirror-acceptance --timeout 20m
          TEST_EXIT_CODE=$?

          # Calculate timing metrics
          END_TIME=$(date +%s)
          TEST_DURATION=$((END_TIME - START_TIME))

          echo "=== Acceptance Test Metrics ==="
          echo "End time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Test duration: ${TEST_DURATION} seconds ($(echo "scale=2; ${TEST_DURATION}/60" | bc) minutes)"
          echo "Test exit code: ${TEST_EXIT_CODE}"

          # Exit with the test result
          exit ${TEST_EXIT_CODE}

      - name: Show Pod Logs on Failure
        if: ${{ failure() }}
        run: |
          echo "--------------------------------------------------"
          echo "Workflow failed. Collecting logs for debugging..."
          echo "--------------------------------------------------"

          echo "--- Describing all pods in namespace ${SOLO_NAMESPACE} ---"
          kubectl describe pods -n "${SOLO_NAMESPACE}" || echo "Could not describe pods"

          echo "--- Fetching logs for all pods in namespace ${SOLO_NAMESPACE} ---"
          for pod in $(kubectl get pods -n "${SOLO_NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
            if [ -n "$pod" ]; then
              echo "--- Logs for pod: $pod ---"
              kubectl logs "$pod" -n "${SOLO_NAMESPACE}" --all-containers=true --tail=1000 || echo "Could not get logs for pod $pod"
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up resources..."
          kind delete cluster -n "${SOLO_CLUSTER_NAME}" || echo "Failed to delete cluster"
          rm -rf ~/.solo || echo "Failed to remove solo config"
          echo "Cleanup completed"
