# SPDX-License-Identifier: Apache-2.0

name: End-to-end Tests

on:
  pull_request:
    branches:
      - "main"
      - "release/**"
    paths:
      - "test/**"
  push:
    branches:
      - "main"
      - "release/**"
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch"
        required: true
        type: string

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  acceptance:
    runs-on: hiero-mirror-node-linux-large
    strategy:
      fail-fast: false
      matrix:
        stream-type:
          - RECORD
          - BLOCK
    timeout-minutes: 40
    env:
      BLOCK_NODE_CHART_VERSION: v0.17.1
      CONSENSUS_VERSION: v0.65.1
      MIRROR_NODE_VERSION: v0.139.0-rc3
      SOLO_CLUSTER_NAME: test
      SOLO_NAMESPACE: mirror
      SOLO_CLUSTER_SETUP_NAMESPACE: solo
      SOLO_DEPLOYMENT: solo-deployment
      TAG: pr-changes
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 20

      - name: Install Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          kubectl_version: v1.32.3

      - name: Install JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: "temurin"
          java-version: 21

      - name: Install Solo CLI via npm
        run: npm install -g @hashgraph/solo@v0.43.0

      - name: Build Mirror Node Test JAR
        run: ./gradlew test:build -x test

      - name: Build Mirror Node Test Docker image
        run: docker build -t gcr.io/mirrornode/hedera-mirror-test:${TAG} ./test

      - name: Setup Solo Cluster
        run: |
          set -ex

          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          solo init
          solo cluster-ref connect --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --context kind-"${SOLO_CLUSTER_NAME}"
          kind load docker-image gcr.io/mirrornode/hedera-mirror-test:${TAG} -n "${SOLO_CLUSTER_NAME}"
          solo deployment create --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}"
          solo deployment add-cluster --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --num-consensus-nodes 1
          solo cluster-ref setup --cluster-ref kind-"${SOLO_CLUSTER_NAME}"

          if [ "${{ matrix.stream-type }}" = "BLOCK" ]; then
            solo block node add --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --chart-version "${BLOCK_NODE_CHART_VERSION}" --release-tag "${CONSENSUS_VERSION}"
          fi
          solo node keys --gossip-keys --tls-keys --deployment "${SOLO_DEPLOYMENT}" -i node1
          solo network deploy --deployment "${SOLO_DEPLOYMENT}" --release-tag "${CONSENSUS_VERSION}"
          solo node setup --deployment "${SOLO_DEPLOYMENT}" -i node1 --release-tag "${CONSENSUS_VERSION}"
          solo node start --deployment "${SOLO_DEPLOYMENT}" -i node1

          if [ "${{ matrix.stream-type }}" = "BLOCK" ]; then
          cat <<EOF > mirror.yaml
          importer:
            env:
              HIERO_MIRROR_IMPORTER_BLOCK_NODES_0_HOST: 'block-node-0.${SOLO_NAMESPACE}.svc.cluster.local'
              SPRING_PROFILES_ACTIVE: 'blocknode'
          test:
            cucumberTags: "@acceptance and not @crud and not @equivalence and not @estimateprecompile and not @ethereum and not @historical and not @precompile and not @erc and not @ethcall"
            image:
              tag: ${TAG}
            annotations:
              helm.sh/hook-delete-policy: before-hook-creation
            env:
              HIERO_MIRROR_TEST_ACCEPTANCE_FEATURE_CONTRACTCALLLOCALESTIMATE: "true"
              HIERO_MIRROR_TEST_ACCEPTANCE_NETWORK: OTHER
              HIERO_MIRROR_TEST_ACCEPTANCE_WEB3_OPCODETRACER_ENABLED: "true"
            enabled: true
          web3:
            env:
              HIERO_MIRROR_WEB3_OPCODE_TRACER_ENABLED: "true"
          EOF

          else
          cat <<EOF > mirror.yaml
          test:
            image:
              tag: ${TAG}
            annotations:
              helm.sh/hook-delete-policy: before-hook-creation
            env:
              HIERO_MIRROR_TEST_ACCEPTANCE_FEATURE_CONTRACTCALLLOCALESTIMATE: "true"
              HIERO_MIRROR_TEST_ACCEPTANCE_NETWORK: OTHER
              HIERO_MIRROR_TEST_ACCEPTANCE_WEB3_OPCODETRACER_ENABLED: "true"
              HIERO_MIRROR_TEST_ACCEPTANCE_SKIPENTITIESCLEANUP: "true"
            enabled: true
          web3:
            env:
              HIERO_MIRROR_WEB3_OPCODE_TRACER_ENABLED: "true"
          EOF
          fi

          solo mirror-node deploy --deployment "${SOLO_DEPLOYMENT}" -f mirror.yaml --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --mirror-node-version "${MIRROR_NODE_VERSION}" --pinger

          echo "Solo cluster setup completed successfully!"

      - name: Run acceptance tests
        run: |
          touch output_log.txt
          helm test mirror -n "${SOLO_NAMESPACE}" --logs --filter name=mirror-acceptance --timeout 20m >> output_log.txt
          cat output_log.txt

      - name: Parse acceptance tests logs and set k6 environment variables
        if: ${{ matrix.stream-type != 'BLOCK' }}
        id: log-variables
        run: |
          LOG_FILE="${{ github.workspace }}/output_log.txt"
          ERC_CONTRACT_ADDRESS=$(grep "Skipping cleanup of contract \[ERC\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "ERC_CONTRACT_ADDRESS=$ERC_CONTRACT_ADDRESS"
          echo "ERC_CONTRACT_ADDRESS=$ERC_CONTRACT_ADDRESS" >> $GITHUB_OUTPUT

          DEFAULT_CONTRACT_ADDRESS=$(grep "Skipping cleanup of contract \[PARENT\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "DEFAULT_CONTRACT_ADDRESS=$DEFAULT_CONTRACT_ADDRESS"
          echo "DEFAULT_CONTRACT_ADDRESS=$DEFAULT_CONTRACT_ADDRESS" >> $GITHUB_OUTPUT

          ESTIMATE_PRECOMPILE_CONTRACT=$(grep "Skipping cleanup of contract \[ESTIMATE_PRECOMPILE\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "ESTIMATE_PRECOMPILE_CONTRACT=$ESTIMATE_PRECOMPILE_CONTRACT"
          echo "ESTIMATE_PRECOMPILE_CONTRACT=$ESTIMATE_PRECOMPILE_CONTRACT" >> $GITHUB_OUTPUT

          PRECOMPILE_CONTRACT=$(grep "Skipping cleanup of contract \[PRECOMPILE\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "PRECOMPILE_CONTRACT=$PRECOMPILE_CONTRACT"
          echo "PRECOMPILE_CONTRACT=$PRECOMPILE_CONTRACT" >> $GITHUB_OUTPUT

          RAW_NON_FUNGIBLE_TOKEN_ADDRESS=$(grep "Skipping cleanup of token \[non_fungible\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')
          NON_FUNGIBLE_TOKEN_ADDRESS=$(printf "%064s" "$RAW_NON_FUNGIBLE_TOKEN_ADDRESS" | tr ' ' '0')

          echo "NON_FUNGIBLE_TOKEN_ADDRESS=$NON_FUNGIBLE_TOKEN_ADDRESS"
          echo "NON_FUNGIBLE_TOKEN_ADDRESS=$NON_FUNGIBLE_TOKEN_ADDRESS" >> $GITHUB_OUTPUT

          RAW_TOKEN_ADDRESS=$(grep "Skipping cleanup of token \[fungible\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')
          TOKEN_ADDRESS=$(printf "%064s" "$RAW_TOKEN_ADDRESS" | tr ' ' '0')

          echo "TOKEN_ADDRESS=$TOKEN_ADDRESS"
          echo "TOKEN_ADDRESS=$TOKEN_ADDRESS" >> $GITHUB_OUTPUT

          PAYER_ACCOUNT=$(grep "Skipping cleanup of account \[BOB\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "PAYER_ACCOUNT=$PAYER_ACCOUNT"
          echo "PAYER_ACCOUNT=$PAYER_ACCOUNT" >> $GITHUB_OUTPUT

          ACCOUNT_ADDRESS=$(grep "Skipping cleanup of account \[ALICE\]" "$LOG_FILE" | \
              sed -E 's/.*at address ([0-9a-fA-F]{40})/\1/' | \
              tail -n 1 | \
              tr -d '[:space:]')

          echo "ACCOUNT_ADDRESS=$ACCOUNT_ADDRESS"
          echo "ACCOUNT_ADDRESS=$ACCOUNT_ADDRESS" >> $GITHUB_OUTPUT

      - name: Install k6
        if: ${{ matrix.stream-type != 'BLOCK' }}
        uses: grafana/setup-k6-action@ffe7d7290dfa715e48c2ccc924d068444c94bde2 # v1

      - name: Port forward web3
        if: ${{ matrix.stream-type != 'BLOCK' }}
        run: |
          echo "Port forwarding 8080:80"
          kubectl port-forward "service/mirror-web3" -n mirror 8080:80 &

      - name: Run k6 web3 tests
        if: ${{ matrix.stream-type != 'BLOCK' }}
        uses: grafana/run-k6-action@a15e2072ede004e8d46141e33d7f7dad8ad08d9d # v1
        env:
          ACCOUNT_ADDRESS: ${{ steps.log-variables.outputs.ACCOUNT_ADDRESS }}
          AMOUNT: "0000000000000000000000000000000000000000000000000000000000000001"
          BASE_URL: "http://localhost:8080"
          DEFAULT_CONTRACT_ADDRESS: ${{ steps.log-variables.outputs.DEFAULT_CONTRACT_ADDRESS }}
          DEFAULT_DURATION: "3s"
          DEFAULT_VUS: 2
          ERC_CONTRACT_ADDRESS: ${{ steps.log-variables.outputs.ERC_CONTRACT_ADDRESS }}
          ESTIMATE_PRECOMPILE_CONTRACT: ${{ steps.log-variables.outputs.ESTIMATE_PRECOMPILE_CONTRACT }}
          HTS_CONTRACT_ADDRESS: ${{ steps.log-variables.outputs.PRECOMPILE_CONTRACT }}
          KEY_TYPE: "0000000000000000000000000000000000000000000000000000000000000001"
          NON_FUNGIBLE_TOKEN_ADDRESS: ${{ steps.log-variables.outputs.NON_FUNGIBLE_TOKEN_ADDRESS }}
          PAYER_ACCOUNT: ${{ steps.log-variables.outputs.PAYER_ACCOUNT }}
          RUN_COMPLEX_TESTS: "false"
          RUN_ESTIMATE_TESTS: "false"
          RUN_MODIFICATION_TESTS: "false"
          RUN_WITH_VARIABLES: "true"
          SERIAL_NUMBER: "0000000000000000000000000000000000000000000000000000000000000001"
          TOKEN_ADDRESS: ${{ steps.log-variables.outputs.TOKEN_ADDRESS }}
        with:
          path: |
            ./tools/k6/src/web3/test/contractCallRampUp.js
            ./tools/k6/src/web3/test/contractCallApproved.js
            ./tools/k6/src/web3/test/contractCallBalance.js
            ./tools/k6/src/web3/test/contractCallDecimals.js
            ./tools/k6/src/web3/test/contractCallFungibleTokenInfo.js
            ./tools/k6/src/web3/test/contractCallIdentifier.js
            ./tools/k6/src/web3/test/contractCallIsToken.js
            ./tools/k6/src/web3/test/contractCallMultiply.js
            ./tools/k6/src/web3/test/contractCallName.js
            ./tools/k6/src/web3/test/contractCallNonFungibleTokenInfo.js
            ./tools/k6/src/web3/test/contractCallOwnerOf.js
            ./tools/k6/src/web3/test/contractCallSender.js
            ./tools/k6/src/web3/test/contractCallSymbol.js
            ./tools/k6/src/web3/test/contractCallTokenCustomFees.js
            ./tools/k6/src/web3/test/contractCallTokenDefaultFreezeStatus.js
            ./tools/k6/src/web3/test/contractCallTokenDefaultKycStatus.js
            ./tools/k6/src/web3/test/contractCallTokenExpiryInfo.js
            ./tools/k6/src/web3/test/contractCallTokenInfo.js
            ./tools/k6/src/web3/test/contractCallTokenKey.js
            ./tools/k6/src/web3/test/contractCallTokenType.js
            ./tools/k6/src/web3/test/contractCallTokenURI.js
            ./tools/k6/src/web3/test/contractCallTotalSupply.js
          debug: false
          flags: --quiet
          fail-fast: true

      - name: Show Pod Logs on Failure
        continue-on-error: true
        if: ${{ failure() }}
        run: |
          echo "--------------------------------------------------"
          echo "Workflow failed. Collecting logs for debugging..."
          echo "--------------------------------------------------"

          echo "--- Describing all pods in namespace ${SOLO_NAMESPACE} ---"
          kubectl describe pods -n "${SOLO_NAMESPACE}" || echo "Could not describe pods"

          echo "--- Fetching logs for all pods in namespace ${SOLO_NAMESPACE} ---"
          for pod in $(kubectl get pods -n "${SOLO_NAMESPACE}" -o name); do
            if [ -n "$pod" ]; then
              echo "--- Logs for pod: $pod ---"
              kubectl logs "$pod" -n "${SOLO_NAMESPACE}" --all-containers=true --tail=10000 || echo "Could not get logs for pod $pod"
            fi
          done

      - name: Cleanup
        continue-on-error: true
        if: always()
        run: kind delete cluster -n "${SOLO_CLUSTER_NAME}"
