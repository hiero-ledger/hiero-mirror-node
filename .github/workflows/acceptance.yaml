# SPDX-License-Identifier: Apache-2.0

name: End-to-end Tests

on:
  pull_request:
    branches:
      - "main"
      - "release/**"
    paths:
      - "test/**"
  push:
    branches:
      - "main"
      - "release/**"
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch"
        required: true
        type: string

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  acceptance:
    runs-on: hiero-mirror-node-linux-large
    timeout-minutes: 40
    env:
      SOLO_CLUSTER_NAME: solo-mirror-acceptance
      SOLO_NAMESPACE: solo
      SOLO_CLUSTER_SETUP_NAMESPACE: solo-mirror-acceptance-setup
      SOLO_DEPLOYMENT: solo-deployment
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0

      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          kubectl_version: v1.32.3

      - name: Install JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: "temurin"
          java-version: 21

      - name: Install Solo CLI via npm
        run: npm install -g @hashgraph/solo@v0.43.0

      - name: Build Mirror Node Test JAR
        run: ./gradlew test:build -x test

      - name: Build Mirror Node Test Docker image
        run: docker build -t gcr.io/mirrornode/hedera-mirror-test:pr-test ./test

      - name: Setup Solo Cluster
        run: |
          set -ex

          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          solo init
          solo cluster-ref connect --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --context kind-"${SOLO_CLUSTER_NAME}"
          kind load docker-image gcr.io/mirrornode/hedera-mirror-test:pr-test -n "${SOLO_CLUSTER_NAME}"
          solo deployment create --deployment "${SOLO_DEPLOYMENT}" --namespace "${SOLO_NAMESPACE}"
          solo deployment add-cluster --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --num-consensus-nodes 1
          solo cluster-ref setup --cluster-ref kind-"${SOLO_CLUSTER_NAME}"
          solo node keys --gossip-keys --tls-keys --deployment "${SOLO_DEPLOYMENT}" -i node1
          solo network deploy --deployment "${SOLO_DEPLOYMENT}" --release-tag v0.65.0-rc.4
          solo node setup --deployment "${SOLO_DEPLOYMENT}" -i node1 --release-tag v0.65.0-rc.4
          solo node start --deployment "${SOLO_DEPLOYMENT}" -i node1

          cat <<EOF > temp-values.yaml
          global:
            image:
              tag: "${{ github.base_ref }}"
          test:
            image:
              tag: pr-test
            annotations:
              helm.sh/hook-delete-policy: before-hook-creation
            env:
              HIERO_MIRROR_TEST_ACCEPTANCE_NETWORK: OTHER
            cucumberTags: "@acceptance and not @estimateprecompile"
            enabled: true
          EOF

          solo mirror-node deploy --deployment "${SOLO_DEPLOYMENT}" -f=temp-values.yaml --cluster-ref kind-"${SOLO_CLUSTER_NAME}" --pinger

          echo "Solo cluster setup completed successfully!"

      - name: Run acceptance tests
        run: helm test mirror -n "${SOLO_NAMESPACE}" --logs --filter name=mirror-acceptance --timeout 20m

      - name: Show Pod Logs on Failure
        continue-on-error: true
        if: ${{ failure() }}
        run: |
          echo "--------------------------------------------------"
          echo "Workflow failed. Collecting logs for debugging..."
          echo "--------------------------------------------------"

          echo "--- Describing all pods in namespace ${SOLO_NAMESPACE} ---"
          kubectl describe pods -n "${SOLO_NAMESPACE}" || echo "Could not describe pods"

          echo "--- Fetching logs for all pods in namespace ${SOLO_NAMESPACE} ---"
          for pod in $(kubectl get pods -n "${SOLO_NAMESPACE}" -o name); do
            if [ -n "$pod" ]; then
              echo "--- Logs for pod: $pod ---"
              kubectl logs "$pod" -n "${SOLO_NAMESPACE}" --all-containers=true --tail=1000 || echo "Could not get logs for pod $pod"
            fi
          done

      - name: Cleanup
        continue-on-error: true
        if: always()
        run: kind delete cluster -n "${SOLO_CLUSTER_NAME}"
