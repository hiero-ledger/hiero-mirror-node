# SPDX-License-Identifier: Apache-2.0

name: GKE WIF Smoke Test

on:
  push:
    branches: [jtn-copy-live-env]
  workflow_dispatch:
    inputs:
      main_cluster_location:
        description: "Main: GKE location (zone or region)"
        required: true
      main_cluster_name:
        description: "Main: GKE cluster name"
        required: true
      staging_cluster_location:
        description: "Staging: GKE location (zone or region) — leave blank to skip"
        required: false
      staging_cluster_name:
        description: "Staging: GKE cluster name — leave blank to skip"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  run:
    runs-on: ubuntu-22.04
    env:
      WIF_PROVIDER: ${{ secrets.GH_ACTIONS_KUBECTL_WORKLOAD_ID_PROVIDER }}
      SA_EMAIL: ${{ secrets.GH_ACTIONS_KUBECTL_GCP_SERVICE_ACCOUNT }}
      MAIN_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_MAIN_PROJECT_ID }}
      STAGING_PROJECT: ${{ secrets.GH_ACTIONS_KUBECTL_STAGING_PROJECT_ID }}
      CONFIG_PATH: ${{ vars.COPY_ENV_CONFIG_PATH || '.github/workflows/copy-env.config.json' }}
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq is available
        run: jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Load config
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          test -f "$CONFIG_PATH" || { echo "Config not found: $CONFIG_PATH"; exit 1; }
          main_loc=$(jq -r '.main.location' "$CONFIG_PATH")
          main_name=$(jq -r '.main.cluster_name' "$CONFIG_PATH")
          stg_enabled=$(jq -r '.staging.enabled // false' "$CONFIG_PATH")
          stg_loc=$(jq -r '.staging.location // ""' "$CONFIG_PATH")
          stg_name=$(jq -r '.staging.cluster_name // ""' "$CONFIG_PATH")
          {
            echo "MAIN_LOCATION=$main_loc"
            echo "MAIN_NAME=$main_name"
            echo "STG_ENABLED=$stg_enabled"
            echo "STG_LOCATION=$stg_loc"
            echo "STG_NAME=$stg_name"
          } >> "$GITHUB_ENV"

      - name: Authenticate via WIF
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SA_EMAIL }}

      - name: Setup gcloud + GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Get GKE credentials (main)
        uses: google-github-actions/get-gke-credentials@v3
        with:
          project_id: ${{ env.MAIN_PROJECT }}
          location: ${{ env.MAIN_LOCATION }}
          cluster_name: ${{ env.MAIN_NAME }}

      - name: Verify kubectl (main)
        shell: bash
        run: |
          set -euo pipefail
          kubectl version --short
          kubectl --request-timeout=5s get --raw='/readyz' >/dev/null 2>&1 && echo "API ready"
          kubectl auth can-i list pods --all-namespaces
          kubectl get pods --all-namespaces --no-headers | head -50

      - name: Get GKE credentials (staging)
        if: ${{ env.STG_ENABLED == 'true' && env.STG_LOCATION != '' && env.STG_NAME != '' }}
        uses: google-github-actions/get-gke-credentials@v3
        with:
          project_id: ${{ env.STAGING_PROJECT }}
          location: ${{ env.STG_LOCATION }}
          cluster_name: ${{ env.STG_NAME }}

      - name: Verify kubectl (staging)
        if: ${{ env.STG_ENABLED == 'true' && env.STG_LOCATION != '' && env.STG_NAME != '' }}
        shell: bash
        run: |
          set -euo pipefail
          kubectl version --short
          kubectl --request-timeout=5s get --raw='/readyz' >/dev/null 2>&1 && echo "API ready"
          kubectl auth can-i list pods --all-namespaces
          kubectl get pods --all-namespaces --no-headers | head -50
